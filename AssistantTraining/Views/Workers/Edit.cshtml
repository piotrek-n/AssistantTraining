@*@model AssistantTraining.ViewModel.WorkerGroupViewModel*@
@model AssistantTraining.ViewModel.WorkerViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Worker</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstMidName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstMidName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstMidName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AvailableGroups, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DropDownList("GroupID", (MultiSelectList)ViewBag.Groups, new { multiple = "multiple", @class = "form-control" })*@
                @*@Html.ListBoxFor(x => x.SelectedIds, Model.Items, new { multiple = "multiple", @class = "form-control" })*@
                @*@Html.CheckBoxListFor(model => model.SelectedSources, Model.SubscriptionSources)*@

                @Html.CheckBoxListFor(model => model.PostingGroups.GroupIDs,
                      model => model.AvailableGroups,
                      entity => entity.ID,
                      entity => entity.GroupName,
                      model => model.SelectedGroups, MvcCheckBoxList.Model.Position.Vertical)

                <div>
                    @*@Html.Label("W celu wybrania wielu pól należy użyć klawisza Shift", htmlAttributes: new { @class = "control-label" })*@
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2" for="checkboxField">Zawieszony</label>
            <div class="col-md-10">
                <!-- bootstrap button group -->
                <div class="btn-group btn-toggle-radio" data-toggle="buttons-radio">
                    <button type="button" data-model-field="checkboxField" class="btn btn-default" id="buttonFilterYes">Yes</button>
                    <button type="button" data-model-field="checkboxField" class="btn btn-success active" id="buttonFilterNo">No</button>
                </div>
                @Html.HiddenFor(model => model.IsSuspend)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*<script src="~/Scripts/jquery-1.10.2.min.js"></script>*@
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        @if (Model.IsSuspend == true)
        {
             @:$("#buttonFilterNo").removeClass("active btn-success");
                     @:$("#buttonFilterNo").addClass("btn-default");
                     @:$("#buttonFilterYes").removeClass("btn-default");
                     @: $("#buttonFilterYes").addClass("active btn-success");

             @:$("#buttonFilterYes").prop("checked", true);
                     @:document.getElementById('IsSuspend').value = "true";
                     //@:alert($("#IsSuspend").val());
         }
         else
         {
             @:$("#buttonFilterYes").removeClass("active btn-success");
                     @:$("#buttonFilterYes").addClass("btn-default");
                     @:$("#buttonFilterNo").removeClass("btn-default");
                     @: $("#buttonFilterNo").addClass("active btn-success");

             @:$("#buttonFilterNo").prop("checked", false);
                     @:document.getElementById('IsSuspend').value = "false";
                     //@:alert($("#IsSuspend").val());
         }

    });
    $(".btn-toggle-radio button").click(function () {
        //  do the Bootstrap formatting
        $(this).siblings().removeClass("active btn-success");
        $(this).siblings().addClass("btn-default");
        $(this).removeClass("btn-default");
        $(this).addClass("active btn-success");
        //  get the data attribute that matches the model field name
        var checkboxToUpdate = $(this).attr("data-model-field");
        //  did the user click YES or NO?
        if ($(this).attr("id") == "buttonFilterYes") {
            $("#" + checkboxToUpdate).prop("checked", true);
            document.getElementById('IsSuspend').value = "true";
            //alert($("#IsSuspend").val());
        } else {
            $("#" + checkboxToUpdate).prop("checked", false);
            document.getElementById('IsSuspend').value = "false";
            //alert($("#IsSuspend").val());
        }
    });
</script>