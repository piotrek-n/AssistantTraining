@model IEnumerable<AssistantTraining.ViewModel.InstructionIndexData>
@using GridMvc.Html
@{
    ViewBag.Title = "Instructions";
}

@if (User.IsInRole("Administrator") || User.IsInRole("Engineer"))
{
    <script>
        var userAdminOrEngineer = true;
    </script>

}
else
{
    <script>
        var useruserAdminOrEngineer = false;
    </script>

}

@if (User.IsInRole("Administrator"))
{
    <script>
        var userAdmin = true;
    </script>
}
else
{
    <script>
        var userAdmin = false;
    </script>
}

<script>
    function changeNewLine(text) {
        var regexp = new RegExp('\n', 'g');
        return text.replace(regexp, '<br>');
    }
</script>
<h2>Instructions</h2>

<p>
    @if (User.IsInRole("Administrator") || User.IsInRole("Engineer") || User.IsInRole("Operator"))
    {
        <div class="row">
            <div class="col-md-4">
                <a href="@Url.Action("Create", "Instructions")" class="btn btn-default">
                    Create
                    <span class="glyphicon" aria-hidden="true"></span>
                </a>
            </div>
            <div class="col-md-4">
            </div>
            <div class="col-md-4">

                @*<form class="navbar-form" role="search" id="idInstructions" method="POST" action="/Instructions/Search">
                        <div class="input-group">
                            <input type="text" class="typeahead form-control" autocomplete="off" placeholder="Instructions" spellcheck="false" name="srchterminstructions" id="srchterminstructions">
                            <div class="input-group-btn">
                                <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                            </div>
                        </div>
                    </form>*@
            </div>
        </div>
    }
</p>

<div class="text-center">
    @(Html.Kendo().Grid<AssistantTraining.ViewModel.InstructionIndexData>()
            .Name("grid")
            .ToolBar(t => t.Search())
            .Columns(columns =>
            {
                columns.Bound(c => c.RowNo).Title("Lp.").Filterable(true).Width(10);
                columns.Bound(c => c.Name).Title("Nazwa").Filterable(true).Width(110);
                columns.Bound(c => c.Number).Title("Numer").Filterable(true).Width(50);
                columns.Bound(c => c.Version).Title("Wersja").Filterable(true).Width(30);
                columns.Bound(c => c.UserName).Title("Użytkownik").Filterable(true).Width(50);
                columns.Bound(c => c.TimeOfCreation).Title("Data").Sortable(true).Filterable(true).Width(50);

                columns.Bound(p => p.GrupsInString).Title("Grupy").ClientTemplate("#= changeNewLine(GrupsInString) #").Sortable(true).Filterable(true).Width(50);

                columns.Bound(p => p.Name)
                        .Title("Akcja")
                        .ClientTemplate(" <a href='/Instructions/Details/#=ID#'>Details</a> # if (userAdminOrEngineer == true) { # <a href='/Instructions/Edit/#=ID#'>Edit</a> # } # # if (userAdmin == true) { # <a href='/Instructions/Delete/#=ID#'>Delete</a>  # } # ")
                        .HtmlAttributes(new { style = "text-align: center;"})
                        .Width(100)
                        .Sortable(false)
                        .Filterable(false);

            })
                .Pageable(pager => pager
                .PageSizes(true)
                .PageSizes(new int[] { 20,50,100 })
                .Input(true)
                .Info(true)
                .PreviousNext(true)
                .Refresh(true)
                .PageSizes(true)
              )
            .Navigatable()
            .Sortable()
            .Filterable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(50)

                .Read(read => read.Action("Select", "Instructions"))
            )
            )
</div>

@* @Html.Grid(Model).Columns(columns => *@
@* { *@
@*     columns.Add(foo => foo.RowNo).Titled("Lp.").Sortable(true).Filterable(true).SetWidth(10); *@
@*     columns.Add(foo => foo.Name).Titled("Nazwa").Sortable(true).Filterable(true).SetWidth(110); *@
@*     columns.Add(foo => foo.Number).Titled("Numer").Sortable(true).Filterable(true).SetWidth(50); *@
@*     columns.Add(foo => foo.Version).Titled("Wersja").Sortable(true).Filterable(true).SetWidth(30); *@
@*     columns.Add(foo => foo.UserName).Titled("Użytkownik").Sortable(true).Filterable(true).SetWidth(50); *@
@*     columns.Add(foo => foo.TimeOfCreation).Titled("Data").Sortable(true).Filterable(true).SetWidth(50); *@
@*     columns.Add() *@
@*             .Titled("Grupy") *@
@*             .Sortable(true) *@
@*             .Filterable(true) *@
@*             .Encoded(false) *@
@*             .Sanitized(false) *@
@*             .SetWidth(110) *@
@*             .RenderValueAs(foo => Groups(foo)); *@
@*     /* Adding not mapped column, that renders body, using inline Razor html helper */ *@
@*     columns.Add() *@
@*         .Encoded(false) *@
@*         .Sanitized(false) *@
@*         .SetWidth(30) *@
@*         .RenderValueAs(foo => Edit(foo.ID)); *@
@* *@
@* }).WithPaging(50) *@
@* *@
@* @helper Edit(int Id) *@
@* { *@
@* @Html.ActionLink("Details", "Details", new { id = Id }) *@
@* *@
@*     if (User.IsInRole("Administrator") || User.IsInRole("Engineer")) *@
@*     { *@
@* @:| @Html.ActionLink("Edit", "Edit", new { id = Id }) *@
@*     } *@
@*     if (User.IsInRole("Administrator")) *@
@*     { *@
@* @:| @Html.ActionLink("Delete", "Delete", new { id = Id }) *@
@*     } *@
@* } *@
@* *@
@* @helper Groups(AssistantTraining.ViewModel.InstructionIndexData item) *@
@* { *@
@* @String.Join(" ", item.Items.Where(x => item.SelectedIds.Contains(x.Value)).Select(x => x.Text).ToArray()) *@
@* } *@